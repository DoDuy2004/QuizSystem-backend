// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizSystem_backend.Models;

#nullable disable

namespace QuizSystem_backend.Migrations
{
    [DbContext(typeof(QuizSystemDbContext))]
    [Migration("20250617114102_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizSystem_backend.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AnswerOrder")
                        .HasColumnType("int")
                        .HasColumnName("answer_order");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("class_code");

                    b.Property<int>("Credit")
                        .HasColumnType("int")
                        .HasColumnName("credit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subject_id");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id");

                    b.HasIndex("ClassCode")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("course_classes", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("exam_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int")
                        .HasColumnName("number_of_questions");

                    b.Property<Guid>("RoomExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_exam_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<float>("TotalScore")
                        .HasColumnType("real")
                        .HasColumnName("total_score");

                    b.HasKey("Id");

                    b.HasIndex("ExamCode")
                        .IsUnique();

                    b.HasIndex("RoomExamId");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.ExamQuestion", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("score");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("exam_questions", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Facutly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FacutlyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("facutly_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("FacutlyCode")
                        .IsUnique();

                    b.ToTable("facutlies", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chapter_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("difficulty");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<Guid>("QuestionBankId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_bank_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("topic");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("subject_id");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("question_banks", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_class_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CourseClassId");

                    b.ToTable("room_exams", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentCourseClass", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<Guid>("CourseClass")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_class_id");

                    b.Property<float?>("Grade")
                        .HasColumnType("real")
                        .HasColumnName("grade");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.HasKey("StudentId", "CourseClass");

                    b.HasIndex("CourseClass");

                    b.ToTable("student_course_classes", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseClass")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_class");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId", "CourseClass");

                    b.ToTable("student_exams", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExamDetail", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<Guid>("StudentExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_exam_id");

                    b.HasKey("AnswerId", "QuestionId", "StudentExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentExamId");

                    b.ToTable("student_exam_details", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("FacutlyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("facutly_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("subject_code");

                    b.HasKey("Id");

                    b.HasIndex("FacutlyId");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Student", b =>
                {
                    b.HasBaseType("QuizSystem_backend.Models.User");

                    b.Property<Guid>("FacutlyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("facutly_id");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit")
                        .HasColumnName("is_first_time_login");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("student_code");

                    b.HasIndex("FacutlyId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Teacher", b =>
                {
                    b.HasBaseType("QuizSystem_backend.Models.User");

                    b.Property<Guid>("FacutlyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit")
                        .HasColumnName("is_first_time_login");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("teacher_code");

                    b.HasIndex("FacutlyId");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Answer", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Teacher", "Teacher")
                        .WithMany("CourseClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.RoomExam", "RoomExam")
                        .WithMany("Exams")
                        .HasForeignKey("RoomExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomExam");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.ExamQuestion", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Chapter", "Chapter")
                        .WithMany("Question")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Teacher", "Teacher")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.QuestionBank", "QuestionBank")
                        .WithMany("questions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("QuestionBank");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.CourseClass", "Course")
                        .WithMany("RoomExams")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentCourseClass", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.CourseClass", "Course")
                        .WithMany()
                        .HasForeignKey("CourseClass")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.StudentCourseClass", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId", "CourseClass")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExamDetail", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("StudentExamDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.StudentExam", "StudentExam")
                        .WithMany("StudentExamDetails")
                        .HasForeignKey("StudentExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Subject", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Facutly", "Facutly")
                        .WithMany("Subjects")
                        .HasForeignKey("FacutlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facutly");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Student", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Facutly", "Facutly")
                        .WithMany("Students")
                        .HasForeignKey("FacutlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("QuizSystem_backend.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facutly");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Teacher", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Facutly", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("FacutlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.User", null)
                        .WithOne()
                        .HasForeignKey("QuizSystem_backend.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.Navigation("RoomExams");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Facutly", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentExamDetails");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.Navigation("StudentExamDetails");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Courses");

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Teacher", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
