// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizSystem_backend.Models;

#nullable disable

namespace QuizSystem_backend.Migrations
{
    [DbContext(typeof(QuizSystemDbContext))]
    [Migration("20250702184631_jlaskdfjglagasdsagásgasdavfa")]
    partial class jlaskdfjglagasdsagásgasdavfa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AnswerOrder")
                        .HasColumnType("int")
                        .HasColumnName("thu_tu");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("noi_dung");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("dung");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_cau_hoi");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("CauTraLoi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("mo_ta");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_chuong");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_mon_hoc");

                    b.HasKey("Id");

                    b.HasIndex("CourseClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Chuong", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ma_lop");

                    b.Property<int>("Credit")
                        .HasColumnType("int")
                        .HasColumnName("so_tin_chi");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mo_ta");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_lop");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_mon_hoc");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_giao_vien");

                    b.HasKey("Id");

                    b.HasIndex("ClassCode")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LopHocPhan", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("thoi_gian_lam_bai");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ma_de");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_bai_thi");

                    b.Property<int>("NoOfQuestions")
                        .HasColumnType("int")
                        .HasColumnName("so_cau_hoi");

                    b.Property<Guid?>("RoomExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_phong_thi");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_mon_hoc");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_giang_vien");

                    b.HasKey("Id");

                    b.HasIndex("RoomExamId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("DeThi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.ExamQuestion", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_bai_thi");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_cau_hoi");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("thu_tu");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("diem_so");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChiTietDeThi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_chuong");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("noi_dung");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_nguoi_tao");

                    b.Property<int>("Difficulty")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("do_kho");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("hinh_anh");

                    b.Property<Guid?>("QuestionBankId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_ngan_hang_cau_hoi");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("chu_de");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("loai_cau_hoi");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("CauHoi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("mo_ta");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_ngan_hang");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("NganHangCauHoi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_lop_hoc_phan");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ngay_ket_thuc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_phong");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ngay_bat_dau");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.HasKey("Id");

                    b.HasIndex("CourseClassId");

                    b.ToTable("PhongThi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentCourseClass", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_sinh_vien");

                    b.Property<Guid>("CourseClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_lop_hoc_phan");

                    b.Property<float?>("Grade")
                        .HasColumnType("real")
                        .HasColumnName("diem_so");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ghi_chu");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.HasKey("StudentId", "CourseClassId");

                    b.HasIndex("CourseClassId");

                    b.ToTable("SinhVienLopHocPhan", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_ket_qua_bai_thi");

                    b.Property<Guid>("CourseClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_lop_hoc_phan");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("thoi_luong_phut");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_bai_thi");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_sinh_vien");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId", "CourseClassId");

                    b.ToTable("KetQuaBaiThi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExamDetail", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_cau_tra_loi");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_cau_hoi");

                    b.Property<Guid>("StudentExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_ket_qua_bai_thi");

                    b.HasKey("AnswerId", "QuestionId", "StudentExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentExamId");

                    b.ToTable("ChiTietKetQuaBaiThi", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ma_mon_hoc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ten_mon_hoc");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("trang_thai");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ma_mon_hoc_code");

                    b.HasKey("Id");

                    b.ToTable("MonHoc", (string)null);
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Student", b =>
                {
                    b.HasBaseType("QuizSystem_backend.Models.AppUser");

                    b.Property<string>("Facutly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Teacher", b =>
                {
                    b.HasBaseType("QuizSystem_backend.Models.AppUser");

                    b.Property<string>("Facutly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<string>("TeacherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Facutly")
                                .HasColumnName("Teacher_Facutly");

                            t.Property("IsFirstTimeLogin")
                                .HasColumnName("Teacher_IsFirstTimeLogin");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Answer", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.CourseClass", null)
                        .WithMany("Chapters")
                        .HasForeignKey("CourseClassId");

                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Teacher", "Teacher")
                        .WithMany("CourseClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.RoomExam", "RoomExam")
                        .WithMany("Exams")
                        .HasForeignKey("RoomExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuizSystem_backend.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Teacher", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomExam");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.ExamQuestion", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Chapter", "Chapter")
                        .WithMany("Question")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuizSystem_backend.Models.Teacher", "Teacher")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuizSystem_backend.Models.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chapter");

                    b.Navigation("QuestionBank");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Teacher", null)
                        .WithMany("QuestionBanks")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.CourseClass", "Course")
                        .WithMany("RoomExams")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentCourseClass", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.CourseClass", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Student", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.StudentCourseClass", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId", "CourseClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExamDetail", b =>
                {
                    b.HasOne("QuizSystem_backend.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.Question", "Question")
                        .WithMany("StudentExamDetails")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizSystem_backend.Models.StudentExam", "StudentExam")
                        .WithMany("StudentExamDetails")
                        .HasForeignKey("StudentExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Chapter", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.CourseClass", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("RoomExams");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ExamQuestions");

                    b.Navigation("StudentExamDetails");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.QuestionBank", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.RoomExam", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.StudentExam", b =>
                {
                    b.Navigation("StudentExamDetails");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Courses");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Student", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("QuizSystem_backend.Models.Teacher", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Exams");

                    b.Navigation("QuestionBanks");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
